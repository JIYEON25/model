package memberone;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class StudentDAO {
	private Connection getConnection() {
		Connection conn = null;
		try {
			Context init = new InitialContext();
			DataSource ds = (DataSource)init.lookup("java:comp/env/jdbc/myOracle");
			conn = ds.getConnection();
		} catch(Exception e) {
			System.err.println("Connection 생성 실패");
		}
		return conn;
	}
	
	public boolean idCheck(String id) {
		boolean result = true;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement("select * from student where id=?");
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			
			if(!rs.next()) {
				result = false;		//사용 가능
			}
		} catch(SQLException sqle) {
			sqle.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch(SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch(SQLException sqle2) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch(SQLException sqle3) { }
			}
		}
		return result;
	}
	
	public Vector<ZipCodeVO> zipcodeRead(String dong) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector<ZipCodeVO> vecList = new Vector<ZipCodeVO>();
		try {
			conn = getConnection();
			String strQuery = "Select * from zipcode where dong like '" + dong + "%'";
			pstmt = conn.prepareStatement(strQuery);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ZipCodeVO tempZipcode = new ZipCodeVO();
				tempZipcode.setZipcode(rs.getString("zipcode"));
				tempZipcode.setSido(rs.getString("sido"));
				tempZipcode.setGugun(rs.getString("gugun"));
				tempZipcode.setDong(rs.getString("dong"));
				tempZipcode.setRi(rs.getString("ri"));
				tempZipcode.setBunji(rs.getString("bunji"));
				vecList.addElement(tempZipcode);
			}
		} catch(SQLException sqle) {
			sqle.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException sqle1) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch (SQLException sqle1) { }
			}
		}
		return vecList;
	}
	
	/*
	 * 실제 데이터베이스에 회원데이터를 넣는 메소드
	 */
	public boolean memberInsert(StudentVO vo) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean flag = false;		// registration fail
		try {
			conn = getConnection();
			String strQuery = "insert into student values(?,?,?,?,?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(strQuery);
			pstmt.setString(1, vo.getId());
			pstmt.setString(2, vo.getId());
			pstmt.setString(3, vo.getId());
			pstmt.setString(4, vo.getId());
			pstmt.setString(5, vo.getId());
			pstmt.setString(6, vo.getId());
			pstmt.setString(7, vo.getId());
			pstmt.setString(8, vo.getId());
			pstmt.setString(9, vo.getId());
			pstmt.setString(10, vo.getId());
		}
	}
	
}
