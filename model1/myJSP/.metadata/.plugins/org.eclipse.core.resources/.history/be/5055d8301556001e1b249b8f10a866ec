package boardOne;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class BoardDAO {
	private static BoardDAO instance = null;
	
	private BoardDAO() { }
	
	/**
	 * singleton
	 */
	public static BoardDAO getInstance() {
		if(instance == null) {
			synchronized(BoardDAO.class) {
				instance = new BoardDAO();
			}
		}
		return instance;
	}
	
	/**
	 * 실제 데이터베이스에 데이터를 넣어주는 메소드
	 */
	public void insertArticle(BoardVO article) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int num = article.getNum();
		int ref = article.getRef();
		int step = article.getStep();
		int depth = article.getDepth();
		int number = 0;
		String sql = "";
		try {
			conn = ConnUtil.getConnection();
			pstmt = conn.prepareStatement("select max(num) from board");
			rs = pstmt.executeQuery();
			if(rs.next()) {
				number = rs.getInt(1) + 1;
			} else {
				number = 1;
			}
			if(num != 0) {
				sql = "update board set step=step+1 where ref = ? and step > ?";
				pstmt.getConnection().prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, step);
				pstmt.executeUpdate();
				step = step + 1;
				depth = depth + 1;
			} else {
				ref = number;
				step = 0;
				depth = 0;
			}
			
			sql = "insert into board(num, writer, email, subject, pass, regdate, ref, step, depth, content, ip) values(board_seq.nextval, ?,?,?,?,?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, article.getWriter());
			pstmt.setString(2, article.getEmail());
			pstmt.setString(3, article.getSubject());
			pstmt.setString(4, article.getPass());
			pstmt.setTimestamp(5, article.getRegDate());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, step);
			pstmt.setInt(8, depth);
			pstmt.setString(9, article.getContent());
			pstmt.setString(10, article.getIp());
			pstmt.executeUpdate();
		} catch(Exception ex) {
			ex.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch(SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch(SQLException sqle2) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch(SQLException sqle3) { }
			}
		}
	}
	
	/**
	 * 전체 글의 갯수를 가져오는 메서드
	 */
	public int getArticleCount() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int x = 0;
		try {
			conn = ConnUtil.getConnection();
			pstmt = conn.prepareStatement("select count(*) from board");
			rs = pstmt.executeQuery();
			if(rs.next()) {
				x = rs.getInt(1);
			}
		} catch(Exception ex) {
			ex.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch(SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch(SQLException sqle2) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch(SQLException sqle3) { }
			}
		}
		return x;
	}
	
	/**
	 * board table에서 데이터를 가져오는 메소드
	 */
	public List<BoardVO> getArticles(/*수정 1 */) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BoardVO> articleList = null;
		try {
			conn = ConnUtil.getConnection();
//			수정 2
			pstmt = conn.prepareStatement("select * from board order by num desc");		//수정3
			rs = pstmt.executeQuery();
			if(rs.next()) {
				articleList = new ArrayList<BoardVO>();		//수정4
				do {
					BoardVO article = new BoardVO();
					article.setNum(rs.getInt("num"));
					article.setWriter(rs.getString("writer"));
					article.setEmail(rs.getString("email"));
					article.setSubject(rs.getString("subject"));
					article.setPass(rs.getString("pass"));
					article.setRegDate(rs.getTimestamp("regdate"));
					article.setReadCount(rs.getInt("readcount"));
					article.setRef(rs.getInt("ref"));
					article.setStep(rs.getInt("step"));
					article.setDepth(rs.getInt("depth"));
					article.setContent(rs.getString("content"));
					article.setIp(rs.getString("ip"));
					articleList.add(article);
				} while(rs.next());
			}
		} catch(Exception ex) {
			ex.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch(SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch(SQLException sqle2) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch(SQLException sqle3) { }
			}
		}
		return articleList;
	}
	
	public BoardVO getArticle(int num) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVO article = null;
		try {
			conn = ConnUtil.getConnection();
			pstmt = conn.prepareStatement("update board set readcount=readcount+1 where num = ?");
			pstmt.setInt(1, num);
			pstmt.executeUpdate();
			pstmt = conn.prepareStatement("select * from board where num = ?");
			pstmt.setInt(1, num);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				article = new BoardVO();
				article.setNum(rs.getInt("num"));
				 article.setWriter(rs.getString("writer"));
				 article.setEmail(rs.getString("email"));
				 article.setSubject(rs.getString("subject"));
				 article.setPass(rs.getString("pass"));
				 article.setRegDate(rs.getTimestamp("regdate"));
				 article.setReadCount(rs.getInt("readcount"));
				 article.setRef(rs.getInt("ref"));
				 article.setStep(rs.getInt("step"));
				 article.setDepth(rs.getInt("depth"));
				 article.setContent(rs.getString("content"));
				 article.setIp(rs.getString("ip"));   
			}
		} catch(Exception ex) {
			ex.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();
				} catch(SQLException sqle1) { }
			}
			if(pstmt != null) {
				try {
					pstmt.close();
				} catch(SQLException sqle1) { }
			}
			if(conn != null) {
				try {
					conn.close();
				} catch(SQLException sqle1) { }
			}
		}
		return article;
	}
	
	
	
	
}
